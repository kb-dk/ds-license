openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '${config:openapi.serverurl}'
    description: 'Version 1'

paths:

  /checkAccessForIds:
    post:
      tags:
        - '${project.name}'
      summary: 'Takes an array of recordIds. Will filter the ids and return only those that the users has access to by the licences granted to the user. ID filter field is defined in the YAML configuration'
      operationId: checkAccessForIds  
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/CheckAccessForIdsInput'
                
    
      responses:
        '200':
          description: 'Returns the IDs that has not been filtered by the query. Also return the Solr filter query that was used.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckAccessForIdsOutput'
                 
                
  /checkAccessForResourceIds:
    post:
      tags:
        - '${project.name}'
      summary: 'Takes an array of resource Ids. Will filter the ids and return only those that the users has access to by the licences granted to the user. ResourceID filter field is defined in the YAML configuration'
      operationId: checkAccessForResourceIds  
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/CheckAccessForIdsInput'
                
    
      responses:
        '200':
          description: 'Returns the IDs that has not been filtered by the query. Also return the Solr filter query that was used. IDs that exists but with no access will be return in nonAccessId field' 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckAccessForIdsOutput'

                


  /validateAccess:
    post:
      tags:
        - '${project.name}'
      summary: 'Validate if user has access to all groups in input.' 
      operationId: validateAccess 
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/ValidateAccessInput'
                
      responses:
        '200':
          description: 'True or false'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateAccessOutput'
             
  /getUserLicenses:
    post:
      tags:
        - '${project.name}'
      summary: 'Get a list of all licences that validates from user attributes.'
      operationId: getUserLicenses       
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/GetUsersLicensesInput'
    
      responses:
        '200':
          description: 'Returns the names of all the licences that validates for the user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersLicensesOutput'
             
                                          
                                          
  /getUserLicenseQuery:
    post:
      tags:
        - '${project.name}'
      summary: 'Shows the filter query for Solr generated from the user attributes. PresentationType are defined in configuration. Example: Search'
      operationId: getUserLicenseQuery      
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/GetUserQueryInput'
                
    
      responses:
        '200':
          description: 'The Solr filter query.'
          content:
            application/json:    # Media type
              schema:            # Request body contents
                $ref: '#/components/schemas/GetUsersFilterQueryOutput'                    
                example: '{"filterQuery": "(((subject:\"Tyskland\") OR (id:*manus!judsam!*)) -(access_blokeret:true))"}'                      


  /getUserGroups:
    post:
      tags:
        - '${project.name}'
      summary: 'Get the groups that the user has access to'
      operationId: getUserGroups       
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents                                             
              $ref: '#/components/schemas/GetUserGroupsInput'
                             
      responses:
        '200':
          description: 'Names of the groups and presentationtype that the user has access to'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserGroupsOutput'
            
  /getUserGroupsAndLicenses:
    post:
      tags:
        - '${project.name}'
      summary: 'Get all licenses and groups/presentationtypes that the user has access to. Will also list all licenses defined and presentationtypes'
      operationId: getUserGroupsAndLicenses       
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents                                             
              $ref: '#/components/schemas/GetUserGroupsAndLicensesInput'
                             
      responses:
        '200':
          description: 'List all licenses and groups/presentationtypes that the user has access to. Will also list all licenses defined and presentationtypes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserGroupsAndLicensesOutput'
  



  /monitor:
    post:
      tags:
        - Service
      summary: 'Still TODO, Some statistics for monitoring the application'
      operationId: extractStatistics       
     
      responses:
        '200':
          description: 'TODO'
          content:
            application/json:
              schema:           
                type: string
       
  /monitor/whoami:
    get:
      tags:
        - Service
      summary: 'Extract OAuth2 accessToken in the `Authorization` HTTP header and return the roles from it'
      operationId: probeWhoami
      security:
        - KBOAuth:
          - public
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'
            

  # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string

  # The status service should be in all projects and should provide a list of running jobs,
  # the overall health of the service and similar. While the endpoint should be kept at
  # /monitor/status, the response should be adjusted to fit the application.
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the simple /monitor/ping is defined above.
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Detailed status / health check for the service'
      operationId: status
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string



components:
  schemas:

    CheckAccessForIdsInput:
      type: object
      properties: 
        presentationType:
          type: string
          example: 'Stream'
        accessIds:     
          type: array
          example: ['id1','id2']
          items:
            type: string                
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'
          
          

    CheckAccessForIdsOutput:    
      type: object
      properties:
        presentationType:
          type: string
        query:     
          type: string
          description: 'Solr query'  
        accessIds:     
           type: array
           items:
             type: string
        nonAccessIds:     
           type: array
           items:
             type: string        
        nonExistingIds:     
           type: array
           items:
             type: string             


    ValidateAccessInput:
      type: object
      properties: 
        presentationType:
          type: string
          example: 'Stream'
        groups:     
          type: array
          example: ['group1','group2']
          items:
            type: string       
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'

    ValidateAccessOutput:    
      type: object
      properties:
        access:
          type: boolean


    LicenseOverview:
      type: object
      properties: 
        name:
          type: string
        description:
          type: string
        validFrom:
          type: string
        validTo:
          type: string
     

    UserObjAttribute:
      type: object
      properties:
        attribute:               
          type: string
          description: 'Key/Values attributes describing the user'
          example: 'wayf.mail'  
        values:                    
           type: array
           example: ['teg@kb.dk']
           items:
             type: string     


    GetUserGroupsAndLicensesInput:
      type: object
      properties:                
        locale:         
          type: string
          example: 'da'        
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'

    GetUserGroupsAndLicensesOutput:
      type: object
      properties:                              
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/LicenseOverview'
        allPresentationTypes:
           type: array
           items:
             type: string   
        allGroups:
          type: array
          items:
            type: string   

       
    GetUsersLicensesInput:
      type: object
      properties:                
        locale:
          type: string        
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'


    GetUsersLicensesOutput:
      type: object
      properties:                
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/LicenseOverview'


    GetUsersFilterQueryOutput:
      type: object
      properties:                
        filterQuery:
          type: string      
          

    GetUserQueryInput:
      type: object
      properties: 
        presentationType:
          type: string             
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'
                      
    GetUserQueryOutput:
      type: object
      properties: 
        query:
          type: string             
        userLicenseGroups:   
          type: array
          items:
            type: string 
        userNotInDenyGroups:   
          type: array
          items:
            type: string 

           
    GetUserGroupsInput:
      type: object
      properties: 
        locale:        
          type: string
          example: 'da'             
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'
           
           
    GetUserGroupsOutput:
      type: object
      properties:                    
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
            
            
    UserGroup:
      type: object
      properties:                    
        groupName:
          type: string                 
        presentationTypes:   
          type: array
          items:
            type: string 
            
                    
    HelloReply:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: 'Greeting from the API'

    Whoami:
      type: object
      description: 'OAuth2 information derived from the request'
      properties:
        token:
          type: object
          required:
            - present
          properties:
            present:
              type: boolean
              description: 'True if an OAuth2 accessToken was present in the request, else false'
              example: true
            valid:
              type: boolean
              description: 'True is an OAuth2 accessToken was present and valid, else false'
              example: false
            error:
              type: string
              description: 'If the accessToken is not valid, the reason will be stated here'
            roles:
              type: array
              items:
                type: string
              description: 'The roles stated in the OAuth2 accessToken'
              example: [read, write, admin]
    
    
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    # Basic status response component.
    # TODO: Extend this to provide application specific status, such as a list of running jobs or free disk space
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.2.3'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-04-21T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'
        gitCommitChecksum:
          type: string
          description: 'The checksum of the deployed commit.'
          example: 'ca82a6dff817ec66f44342007202690a93763949'
        gitBranch:
          type: string
          description: 'The current deployed branch.'
          example: master
        gitClosestTag:
          type: string
          description: 'The closest tag of the deployed branch.'
        gitCommitTime:
          type: string
          description: 'The time for the latest commit of the deplyed branch.'
          
          

  # TODO: Inject this from properties when DRA-139 has been implemented
  securitySchemes:

    KBOAuth:
      type: oauth2
      description: 'This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)'
      flows:
        implicit:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: 'https://keycloak-devel-01.kb.dk/realms/ds-poc/protocol/openid-connect/auth'
          #authorizationUrl: https://api.example.com/oauth2/authorize # Overridden by the configuration
          scopes:
            generic_ds: 'Scope used for all Digitale Samlinger services'
            # Project specific roles
            read: 'read data'
            write: 'modify or delete data'

            # General roles at the Royal Danish Library
            devel: 'broad read access'
            admin: 'all rights'

            # Meta role controlling authorization behaviour
            public: 'allowed for all, authorization optional, implementation behaviour depending on caller roles'
            any: 'allowed for all, authorization mandatory, implementation behaviour depending on caller roles'
                
