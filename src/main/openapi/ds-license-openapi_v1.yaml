openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '${config:openapi.serverurl}'
    description: 'Version 1'

paths:

  /checkAccessForIds:
    post:
      tags:
        - '${project.name}'
      summary: 'Takes an array of recordIds. Will filter the ids and return only those that the users has access to by the licences granted to the user. ID filter field is defined in the YAML configuration'
      security: 
        - KBOAuth:
          - any       
      operationId: checkAccessForIds  
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/CheckAccessForIdsInput'
                
    
      responses:
        '200':
          description: 'Returns the IDs that has not been filtered by the query. Also return the Solr filter query that was used.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckAccessForIdsOutput'


  /checkAccessForResourceIds:
    post:
      tags:
        - '${project.name}'
      summary: 'Takes an array of resource Ids. Will filter the ids and return only those that the users has access to by the licences granted to the user. ResourceID filter field is defined in the YAML configuration'
      security:
        - KBOAuth:
          - any
      operationId: checkAccessForResourceIds
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/CheckAccessForIdsInput'


      responses:
        '200':
          description: 'Returns the IDs that has not been filtered by the query. Also return the Solr filter query that was used. IDs that exists but with no access will be return in nonAccessId field'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckAccessForIdsOutput'




  /validateAccess:
    post:
      tags:
        - '${project.name}'
      summary: 'Validate if user has access to all groups in input.'
      security:
        - KBOAuth:
          - any
      operationId: validateAccess
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/ValidateAccessInput'

      responses:
        '200':
          description: 'True or false'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateAccessOutput'

  /getUserLicenses:
    post:
      tags:
        - '${project.name}'
      summary: 'Get a list of all licences that validates from user attributes.'
      security: 
        - KBOAuth:
          - any      
      operationId: getUserLicenses       
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/GetUsersLicensesInput'
    
      responses:
        '200':
          description: 'Returns the names of all the licences that validates for the user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersLicensesOutput'
             
                                          
                                          
  /getUserLicenseQuery:
    post:
      tags:
        - '${project.name}'
      summary: 'Shows the filter query for Solr generated from the user attributes. PresentationType are defined in configuration. Example: Search'
      security: 
        - KBOAuth:
          - any      
      operationId: getUserLicenseQuery      
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/GetUserQueryInput'
                
    
      responses:
        '200':
          description: 'The Solr filter query.'
          content:
            application/json:    # Media type
              schema:            # Request body contents
                $ref: '#/components/schemas/GetUsersFilterQueryOutput'                    
                example: '{"filterQuery": "(((subject:\"Tyskland\") OR (id:*manus!judsam!*)) -(access_blokeret:true))"}'                      


  /getUserGroups:
    post:
      tags:
        - '${project.name}'
      summary: 'Get the groups that the user has access to'
      security: 
        - KBOAuth:
          - any            
      operationId: getUserGroups       
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents                                             
              $ref: '#/components/schemas/GetUserGroupsInput'
                             
      responses:
        '200':
          description: 'Names of the groups and presentationtype that the user has access to'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserGroupsOutput'
            
  /getUserGroupsAndLicenses:
    post:
      tags:
        - '${project.name}'
      summary: 'Get all licenses and groups/presentationtypes that the user has access to. Will also list all licenses defined and presentationtypes'
      security: 
        - KBOAuth:
          - any      
      operationId: getUserGroupsAndLicenses       
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents                                             
              $ref: '#/components/schemas/GetUserGroupsAndLicensesInput'
                             
      responses:
        '200':
          description: 'List all licenses and groups/presentationtypes that the user has access to. Will also list all licenses defined and presentationtypes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserGroupsAndLicensesOutput'
  
  # Audit
  /audit/auditEntryById:
    get:
      summary: return the AuditLogEntry with the given id
      tags:
        - 'DsAudit'
      operationId: getAuditEntryById
      security:
        - KBOAuth:
            - any
      parameters:
        - name: id
          in: query
          description: Filter on id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get specific Audit log by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryOutput'


  /audit/auditEntriesByObjectId:
    get:
      summary: Return a list of AuditLogEntry related to an object by object id
      tags:
        - 'DsAudit'
      operationId: getAuditEntriesByObjectId
      security:
        - KBOAuth:
            - any
      parameters:
        - name: objectid
          in: query
          description: Filter on objectid
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: return all auditlogs related to objectid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditEntryOutput'

  # Rights
  /rights/platforms:
    get:
      summary: Get all available platforms
      tags:
        - 'DsRights'
      operationId: getPlatforms
      security:
        - KBOAuth:
            - any
      responses:
        '200':
          description: A JSON array of available platforms.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /rights/idTypes:
    get:
      summary: Get all allowed ID Types in the rights component.
      tags:
        - 'DsRights'
      operationId: getIdTypes
      security:
        - KBOAuth:
            - any
      parameters:
        - name: platform
          in: query
          description: "The platform to extract ID Types for"
          schema:
            $ref: '#/components/schemas/PlatformEnum'
      responses:
        '200':
          description: A JSON array of allowed ID types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string


  /rights/restrictedIds:
    get:
      summary: get all restricted ids
      tags:
        - 'DsRights'
      operationId: getAllRestrictedIds
      security:
        - KBOAuth:
            - any
      parameters:
        - name: idType
          in: query
          description: Filter on idType
          schema:
            $ref: '#/components/schemas/IdTypeEnum'
        - name: platform
          in: query
          description: Filter On platform
          schema:
            $ref: '#/components/schemas/PlatformEnum'
      responses:
        '200':
          description:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestrictedIdOutput'

    post:
      description: create multiple restricted ids
      tags:
        - 'DsRights'
      operationId: createRestrictedIds
      security:
        - KBOAuth:
            - any
      parameters:
        - name: touchRecord
          in: query
          schema:
            type: boolean
            default: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RestrictedIdInput'
            example:
              - idValue: "test:multi:1"
                idType: DS_ID
                platform: DRARKIV
                comment: "test multi 2"
              - idValue: "test:multi:2"
                idType: DS_ID
                platform: DRARKIV
                comment: "test multi 1"
              - idValue: "test:multi:3"
                idType: DR_PRODUCTION_ID
                platform: DRARKIV
                comment: "test multi 1"
      responses:
        '204':
          description: created
  
  /rights/restrictedId:
    get:
      tags:
        - 'DsRights'
      operationId: getRestrictedId
      security:
        - KBOAuth:
            - any
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
        - name: idType
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/IdTypeEnum"
        - name: platform
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/PlatformEnum"
      responses:
        '200':
          description: Get a restricted ID details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedIdOutput'
        '404':
          description: restricted id not found
    delete:
      tags:
        - 'DsRights'
      operationId: deleteRestrictedId
      security:
        - KBOAuth:
            - any
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: touchRecord
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordsCount'
    post:
      tags:
        - 'DsRights'
      operationId: createRestrictedId
      security:
        - KBOAuth:
            - any
      parameters:
        - name: touchRecord
          in: query
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestrictedIdInput'
            examples:
              DrProductionID:
                value:
                  idValue: 'test1'
                  idType: DR_PRODUCTION_ID
                  platform: DRARKIV
                  comment: 'Dette er en test'
      responses:
        '201':
          description: created
    put:
        tags:
          - 'DsRights'
        operationId: updateRestrictedId
        security:
          - KBOAuth:
              - any
        parameters:
          - name: touchRecord
            in: query
            schema:
              type: boolean
              default: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedIdInput'
              examples:
                DrProductionID:
                  value:
                    idValue: 'test1'
                    idType: DR_PRODUCTION_ID
                    platform: DRARKIV
                    comment: 'Dette er en opdateret kommentar'

        responses:
          '201':
            description: created

  /rights/drHoldbackRules:
    get:
      tags:
        - 'DsRights'
      operationId: getDrHoldbackRules
      description: get all DR holdback rules
      security:
        - KBOAuth:
            - any
      responses:
        '200':
          description: list of holdback rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DrHoldbackRule'

  /rights/drHoldbackRule:
    get:
      tags:
        - 'DsRights'
      operationId: getDrHoldbackRule
      security:
        - KBOAuth:
            - any
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: retrieve a holdback rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrHoldbackRule'
        '404':
          description: not found
    delete:
      tags:
        - 'DsRights'
      operationId: deleteDrHoldbackRule
      security:
        - KBOAuth:
            - any
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: succesfully deleted
    post:
      tags:
        - 'DsRights'
      operationId: createDrHoldbackRule
      security:
        - KBOAuth:
            - any
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DrHoldbackRule'
            examples:
              example1:
                value:
                  id: test1
                  name: "Testing"
                  days: 100
      responses:
        '201':
          description: sucessfully created

  /rights/drHoldbackDays:
    get:
      tags:
        - 'DsRights'
      operationId: getDrHoldbackDays
      description: gets the number of holdbackdays. One of the parameters id or name should be nonempty. id takes precedence over name.
      security:
        - KBOAuth:
            - any
      parameters:
        - name: id
          in: query
          required: false
          description: id of the holdback rule
          schema:
            type: string
        - name: name
          in: query
          required: false
          description: name of the holdback rule
          schema:
            type: string
      responses:
        '200':
          description: holdback days
          content:
            application/json:
                schema:
                  type: integer
        '404':
          description: holdback not found
    put:
      tags:
        - 'DsRights'
      operationId: updateDrHoldbackDays
      description: update the number of holdbackdays for a purpose. One of the parameters id or name should be nonempty. id takes precedence over name.
      security:
        - KBOAuth:
            - any
      parameters:
        - name: id
          in: query
          required: false
          description: id of the holdback rule
          schema:
            type: string
        - name: name
          in: query
          required: false
          description: name of the holdback rule
          schema:
            type: string
        - name: days
          in: query
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Updated

  /rights/drHoldbackRanges:
    get:
      summary: get all holdback ranges for a holdback ID
      tags:
        - 'DsRights'
      operationId: getHoldbackRanges
      security:
        - KBOAth:
            - any
      parameters:
        - name: dr_holdback_id
          in: query
          description: filter on holdback id
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DrHoldbackRangeMapping'
    post:
      summary: set holdback ranges for a holdback id
      tags:
        - 'DsRights'
      operationId: createHoldbackRanges
      security:
        - KBOAth:
            - any
      parameters:
        - name: dr_holdback_id
          in: query
          schema:
            type: string
      requestBody:
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DrHoldbackRangeMappingInput'

      responses:
        '201':
          description: created
    delete:
      summary: delete holdback ranges for a holdback id
      tags:
        - 'DsRights'
      operationId: deleteHoldbackRanges
      security:
        - KBOAth:
            - any
      parameters:
        - name: dr_holdback_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: deleted

  /rights/getHoldbackIdFromContentAndForm:
    get:
      summary: get the holdback id from content and form metadata.
      tags:
        - 'DsRights'
      operationId: getHoldbackIdFromContentAndForm
      security:
        - KBOAth:
            - any
      parameters:
        - name: content
          in: query
          required: true
          schema:
            type: integer
        - name: form
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            'application/json':
              schema:
                type: string
  /rights/calculate:
    post:
      tags:
        - 'DsRights'
      operationId: calculateRights
      summary: "Calculate restrictions for a record based on input values"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RightsCalculationInput"
      responses:
        '200':
          description: "Solr compliant fields and values"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RightsCalculationOutput"



  /monitor:
    post:
      tags:
        - Service
      summary: 'Still TODO, Some statistics for monitoring the application'
      operationId: extractStatistics       
     
      responses:
        '200':
          description: 'TODO'
          content:
            application/json:
              schema:           
                type: string
       
  /monitor/whoami:
    get:
      tags:
        - Service
      summary: 'Extract OAuth2 accessToken in the `Authorization` HTTP header and return the roles from it'
      operationId: probeWhoami
      security:
        - KBOAuth:
          - public
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'
            

  # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string

  # The status service should be in all projects and should provide a list of running jobs,
  # the overall health of the service and similar. While the endpoint should be kept at
  # /monitor/status, the response should be adjusted to fit the application.
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the simple /monitor/ping is defined above.
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Detailed status / health check for the service'
      operationId: status
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string



components:
  schemas:

    CheckAccessForIdsInput:
      type: object
      properties: 
        presentationType:
          type: string
          example: 'Stream'
        accessIds:     
          type: array
          example: ['id1','id2']
          items:
            type: string                
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'
          
          

    CheckAccessForIdsOutput:    
      type: object
      properties:
        presentationType:
          type: string
        query:     
          type: string
          description: 'Solr query'  
        accessIds:     
           type: array
           items:
             type: string
        nonAccessIds:     
           type: array
           items:
             type: string        
        nonExistingIds:     
           type: array
           items:
             type: string             


    ValidateAccessInput:
      type: object
      properties: 
        presentationType:
          type: string
          example: 'Stream'
        groups:     
          type: array
          example: ['group1','group2']
          items:
            type: string       
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'

    ValidateAccessOutput:    
      type: object
      properties:
        access:
          type: boolean

    LicenseOverview:
      type: object
      properties: 
        name:
          type: string
        description:
          type: string
        validFrom:
          type: string
        validTo:
          type: string
     

    UserObjAttribute:
      type: object
      properties:
        attribute:               
          type: string
          description: 'Key/Values attributes describing the user'
          example: 'wayf.mail'  
        values:                    
           type: array
           example: ['teg@kb.dk']
           items:
             type: string     

    GetUserGroupsAndLicensesInput:
      type: object
      properties:                
        locale:         
          type: string
          example: 'da'        
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'

    GetUserGroupsAndLicensesOutput:
      type: object
      properties:                              
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/LicenseOverview'
        allPresentationTypes:
           type: array
           items:
             type: string   
        allGroups:
          type: array
          items:
            type: string   

       
    GetUsersLicensesInput:
      type: object
      properties:                
        locale:
          type: string        
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'

    GetUsersLicensesOutput:
      type: object
      properties:                
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/LicenseOverview'

    GetUsersFilterQueryOutput:
      type: object
      properties:                
        filterQuery:
          type: string      
          

    GetUserQueryInput:
      type: object
      properties: 
        presentationType:
          type: string             
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'
                      
    GetUserQueryOutput:
      type: object
      properties: 
        query:
          type: string             
        userLicenseGroups:   
          type: array
          items:
            type: string 
        userNotInDenyGroups:   
          type: array
          items:
            type: string 

           
    GetUserGroupsInput:
      type: object
      properties: 
        locale:        
          type: string
          example: 'da'             
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'
           
           
    GetUserGroupsOutput:
      type: object
      properties:                    
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
            
            
    UserGroup:
      type: object
      properties:                    
        groupName:
          type: string                 
        presentationTypes:   
          type: array
          items:
            type: string 

    # Rights module
    PlatformEnum:
      type: string
      enum:
        - DRARKIV
        - GENERIC

    IdTypeEnum:
      type: string
      enum:
        - DS_ID
        - DR_PRODUCTION_ID
        - STRICT_TITLE
        - OWNPRODUCTION_CODE

    ChangeTypeEnum:
      type: string
      enum:
        - CREATE
        - UPDATE
        - DELETE

    ObjectTypeEnum:
      type: string
      enum:
        - DS_ID
        - DR_PRODUCTION_ID
        - STRICT_TITLE
        - OWNPRODUCTION_CODE
        - CLAUSE_PRODUCTION_CODE
        - CLAUSE_STRICT_TITLE
        - PRESENTATION_TYPE
        - LICENSE
        - GROUP_TYPE
        - HOLDBACK_DAY
        - HOLDBACK_MAP
        - ATTRIBUTE_NAME

    AuditEntryOutput:
      type: object
      properties:
        id:
          type: integer
          format: int64
        objectId:
          type: integer
          format: int64
        modifiedTime:
          type: long
        userName:
          type: string
        changeType:
          $ref: "#/components/schemas/ChangeTypeEnum"
        changeName:
          $ref: "#/components/schemas/ObjectTypeEnum"
        changeComment:
          type: string
        textBefore:
          type: string
        textAfter:
          type: string

    RestrictedIdInput:
      type: object
      required:
        - idValue
        - idType
        - platform
      properties:   
        idValue:
          type: string
        idType:
          $ref: "#/components/schemas/IdTypeEnum"
        platform:
          $ref: "#/components/schemas/PlatformEnum"
        comment:
          type: string

    RestrictedIdOutput:
      type: object
      properties:
        id:
          type: integer
          format: int64
        idValue:
          type: string
        idType:
          $ref: "#/components/schemas/IdTypeEnum"
        platform:
          $ref: "#/components/schemas/PlatformEnum"
        comment:
          type: string
        modifiedBy:
          type: string
        modifiedTime:
          type: long
        modifiedTimeHuman:
          type: string

    DrHoldbackRule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        days:
          type: integer

    DrHoldbackRangeMapping:
      type: object
      properties:
        id:
          type: string
        contentRangeFrom:
          type: integer
        contentRangeTo:
          type: integer
        formRangeFrom:
          type: integer
        formRangeTo:
          type: integer
        drHoldbackId:
          type: string

    DrHoldbackRangeMappingInput:
      type: object
      properties:
        contentRangeFrom:
          type: integer
        contentRangeTo:
          type: integer
        formRangeFrom:
          type: integer
        formRangeTo:
          type: integer

    HelloReply:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: 'Greeting from the API'

    RightsCalculationInput:
      description: "An overall Data Transfer Object which should be used to carry all values needed for calculating rights for a record between services."
      type: object
      x-isRightsCalculationObject: true
      properties:
        recordId:
          type: string
          description: "ID of the record, which this metadata comes from."
        platform:
          $ref: "#/components/schemas/PlatformEnum"
          description: "The platform that rights are calculated for."
        startTime:
          type: string
          description: "Start time of the record this object relates to."
        holdbackInput:
          $ref: "#/components/schemas/HoldbackCalculationInput"
        restrictionsInput:
          $ref: "#/components/schemas/RestrictionsCalculationInput"
      required:
        - recordId
        - platform
        - startTime
        - holdbackInput
        - restrictionsInput

    HoldbackCalculationInput:
      description: "A holdback specific Data Transfer Object which should be used to carry all values needed for calculating holdback for a record between services."
      type: object
      properties:
        hensigt:
          type: integer
          description: "A metadata value used for holdback calculation."
        form:
          type: integer
          description: "A metadata value used for holdback calculation."
        indhold:
          type: integer
          description: "A metadata value used for holdback calculation."
        productionCountry:
          type: integer
          description: "A metadata value used for holdback calculation."
        origin:
          type: string
          description: "Origin in the DS ecosystem. Used to determine how holdback should be calculated."
      required:
        - hensigt
        - form
        - indhold
        - productionCountry
        - origin

    RestrictionsCalculationInput:
      description: "A restrictions specific Data Transfer Object which should be used to carry all values needed for looking up if a record is restricted between services."
      type: object
      properties:
        recordId:
          type: string
          description: "ID of the record, which this metadata comes from."
        productionCode:
          type: string
          description: "a metadata value used for holdback and own production calculation."
        drProductionId:
          type: string
          description: "an internal ID from DR which could be restricted."
        title:
          type: string
          description: "title of the record in hand. There is a chance that it is restricted."
      required:
        - recordId
        - productionCode
        - drProductionId
        - title

    RightsCalculationOutput:
      description: "A Data Transfer Object containing the solr fields and values that have been created from the calculations based on a RightsCalculationInput object."
      type: object
      properties:
        # Platform nesting of calculation results. When more platforms need rights calculations output objects should be appended here.
        generel:
          $ref: "#/components/schemas/RightsCalculationOutputGeneral"
        dr:
          $ref: "#/components/schemas/RightsCalculationOutputDr"

    RightsCalculationOutputGeneral:
      type: object
      description: "Object containing results from all rights calculations that are applicable in general for the record"
      properties:
        dsIdRestricted:
          type: boolean
          description: "A boolean representing if our DS ID for the record has been restricted."

    RightsCalculationOutputDr:
      type: object
      description: "Object containing results from all rights calculations that are applicable for the DR Archive for the record"
      properties:
        dsIdRestricted:
          type: boolean
          description: "A boolean representing if our DS ID for the record has been restricted."
        holdbackName:
          type: string
          description: "The name of the holdback category for the record."
        holdbackExpiredDate:
          type: string
          description: "The date, when the record is out of holdback. This gets calculated by adding X amount of days to the start time of the recording, where X is defined 
          based on holdbackName."
        productionCodeAllowed:
          type: boolean
          description: "A value used to specify if the record in hand is 'ownproduction' and can be shown in the archive."
        drIdRestricted:
          type: boolean
          description: "A boolean representing if DRs internal production ID for the record has been restricted."
        titleRestricted:
          type: boolean
          description: "Some titles are not allowed to be watched, if this boolean is true, then the record cannot be shown,"

    Whoami:
      type: object
      description: 'OAuth2 information derived from the request'
      properties:
        token:
          type: object
          required:
            - present
          properties:
            present:
              type: boolean
              description: 'True if an OAuth2 accessToken was present in the request, else false'
              example: true
            valid:
              type: boolean
              description: 'True is an OAuth2 accessToken was present and valid, else false'
              example: false
            error:
              type: string
              description: 'If the accessToken is not valid, the reason will be stated here'
            roles:
              type: array
              items:
                type: string
              description: 'The roles stated in the OAuth2 accessToken'
              example: [ read, write, admin ]

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    # Basic status response component.
    # TODO: Extend this to provide application specific status, such as a list of running jobs or free disk space
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.2.3'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-04-21T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'
        gitCommitChecksum:
          type: string
          description: 'The checksum of the deployed commit.'
          example: 'ca82a6dff817ec66f44342007202690a93763949'
        gitBranch:
          type: string
          description: 'The current deployed branch.'
          example: master
        gitClosestTag:
          type: string
          description: 'The closest tag of the deployed branch.'
        gitCommitTime:
          type: string
          description: 'The time for the latest commit of the deplyed branch.'

    RecordsCount:
      type: object
      properties:
        count:
          type: integer
          format: int32
          description: 'Number of records updated'
          
  securitySchemes:

    KBOAuth:
      type: oauth2
      description: 'This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)'
      flows:
        implicit:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          #authorizationUrl is not used. Instead it uses keycloak url from yaml property file aegis-devel.
          #If we figure out what this is supposed to be used for, inject the value from yaml file  ${config.yaml.path}           
          authorizationUrl: https://api.example.com/oauth2/authorize 
          scopes:
            generic_ds: 'Scope used for all Digitale Samlinger services'
            # Project specific roles
            read: 'read data'
            write: 'modify or delete data'

            # General roles at the Royal Danish Library
            devel: 'broad read access'
            admin: 'all rights'

            # Meta role controlling authorization behaviour
            public: 'allowed for all, authorization optional, implementation behaviour depending on caller roles'
            any: 'allowed for all, authorization mandatory, implementation behaviour depending on caller roles'
                
