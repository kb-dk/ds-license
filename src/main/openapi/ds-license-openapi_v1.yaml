openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  /ping:
    get:
      tags:
        - '${project.name}'
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  # This definition uses parameters: http://example.com/myservice/v1/hello?alternateHello=Boston
  /hello:
    get:
      tags:
        - '${project.name}'
      summary: 'Request a Hello World message, for testing purposes'
      operationId: getGreeting
      parameters:
        - name: alternateHello
          in: query
          description: 'Optional alternative to using the word ''Hello'' in the reply'
          required: false
          schema:
            type: string
            default: 'World'
      responses:
        '200':
          description: 'A JSON structure containing a Hello World message'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloReply'


  /checkAccessForIds:
    post:
      tags:
        - '${project.name}'
      summary: 'Takes an array of recordIds. Will filter the ids and return only those that the users has access to by the licences granted to the user.'
      operationId: checkAccessForIds  
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/CheckAccessForIdsInput'
                
    
      responses:
        '200':
          description: 'Returns the IDs that has not been filtered by the query. Also return the Solr filter query that was used.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckAccessForIdsOutput'


  /validateAccess:
    post:
      tags:
        - '${project.name}'
      summary: 'Validate if user has access to all groups in input.' 
      operationId: validateAccess 
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/ValidateAccessInput'
                
      responses:
        '200':
          description: 'True or false'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateAccessOutput'
             
  /getUserLicenses:
    post:
      tags:
        - '${project.name}'
      summary: 'Get a list of all licences that validates from user attributes.'
      operationId: getUserLicenses       
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/GetUsersLicensesInput'
    
      responses:
        '200':
          description: 'Returns the names of all the licences that validates for the user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersLicensesOutput'
             
                                          
                                          
  /getUserLicenseQuery:
    post:
      tags:
        - '${project.name}'
      summary: 'Shows the filter query for Solr generated from the user attributes. This query is used to filter IDs'
      operationId: getUserLicenseQuery      
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/GetUserQueryInput'
                
    
      responses:
        '200':
          description: 'The Solr filter query'
          content:
            text/plain:
              schema:
                type: string
                example: '(((subject:"Tyskland") OR (id:*manus!judsam!*)) -(group:"klausuleret"))'                      

  /getUserGroups:
    post:
      tags:
        - '${project.name}'
      summary: 'Get the groups that the user has access to'
      operationId: getUserGroups       
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents                                             
              $ref: '#/components/schemas/GetUserGroupsInput'
                             
      responses:
        '200':
          description: 'Names of the groups and presentationtype that the user has access to'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserGroupsOutput'
            
  /getUserGroupsAndLicenses:
    post:
      tags:
        - '${project.name}'
      summary: 'Get all licenses and groups/presentationtypes that the user has access to. Will also list all licenses defined and presentationtypes'
      operationId: getUserGroupsAndLicenses       
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents                                             
              $ref: '#/components/schemas/GetUserGroupsAndLicensesInput'
                             
      responses:
        '200':
          description: 'List all licenses and groups/presentationtypes that the user has access to. Will also list all licenses defined and presentationtypes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserGroupsAndLicensesOutput'
  



  /monitor:
    post:
      tags:
        - '${project.name}'
      summary: 'Still TODO, Some statistics for monitoring the application'
      operationId: extractStatistics       
     
      responses:
        '200':
          description: 'TODO'
          content:
            application/json:
              schema:           
                type: string
            



components:
  schemas:

    CheckAccessForIdsInput:
      type: object
      properties: 
        presentationType:
          type: string
          example: 'Stream'
        accessIds:     
          type: array
          example: ['id1','id2']
          items:
            type: string                
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'
          
          

    CheckAccessForIdsOutput:    
      type: object
      properties:
        presentationType:
          type: string
        query:     
          type: string
          description: 'Solr query'  
        accessIds:     
           type: array
           items:
             type: string       


    ValidateAccessInput:
      type: object
      properties: 
        presentationType:
          type: string
          example: 'Stream'
        groups:     
          type: array
          example: ['group1','group2']
          items:
            type: string       
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'

    ValidateAccessOutput:    
      type: object
      properties:
        access:
          type: boolean


    LicenseOverview:
      type: object
      properties: 
        name:
          type: string
        description:
          type: string
        validFrom:
          type: string
        validTo:
          type: string
     

    UserObjAttribute:
      type: object
      properties:
        attribute:               
          type: string
          description: 'Key/Values attributes describing the user'
          example: 'wayf.mail'  
        values:                    
           type: array
           example: ['teg@kb.dk']
           items:
             type: string     


    GetUserGroupsAndLicensesInput:
      type: object
      properties:                
        locale:         
          type: string
          example: 'da'        
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'

    GetUserGroupsAndLicensesOutput:
      type: object
      properties:                              
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/LicenseOverview'
        allPresentationTypes:
           type: array
           items:
             type: string   
        allGroups:
          type: array
          items:
            type: string   

       
    GetUsersLicensesInput:
      type: object
      properties:                
        locale:
          type: string        
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'


    GetUsersLicensesOutput:
      type: object
      properties:                
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/LicenseOverview'



    GetUserQueryInput:
      type: object
      properties: 
        presentationType:
          type: string             
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'
                      
    GetUserQueryOutput:
      type: object
      properties: 
        query:
          type: string             
        userLicenseGroups:   
          type: array
          items:
            type: string 
        userNotInDenyGroups:   
          type: array
          items:
            type: string 

           
    GetUserGroupsInput:
      type: object
      properties: 
        locale:        
          type: string
          example: 'da'             
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/UserObjAttribute'
           
           
    GetUserGroupsOutput:
      type: object
      properties:                    
        groups:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
            
            
    UserGroup:
      type: object
      properties:                    
        groupName:
          type: string                 
        presentationTypes:   
          type: array
          items:
            type: string 
            
                    
    HelloReply:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: 'Greeting from the API'

    
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
