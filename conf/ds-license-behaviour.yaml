#
# This config contains behaviour data: Thread allocation, allowed fields for lookup, limits for arguments etc.
#
# The behaviour config is normally controlled by developers and is part of the code repository.
# Sensitive information such as machine names and user/passwords should not be part of this config.
#
# It will be automatically merged with the environment config when accessed through the
# application config system.
#
#

# Solr is used for access filtering by combining filter queries from ds-license with a search for
# a given record- or resource-ID.
solr:
  # Backing Solr servers must be "true" Solr servers (as opposed to ds-discover services) to avoid endless looping
  # It is possible to specify multiple servers: They will all be queried
  servers:
    - http://localhost:10007/solr/ds
  # The field used to verify access based on the ID of a record/document
  # Typically used to determine whether a user is allowed to see search or see metadata for a record
  idField: 'id'
  # The field used to verify access based on the resource ID of a TV-stream, bitmap or similar
  # Typically used for callback from an image server or similar where the record ID is not known
  resourceField: 'resource_id'

openapi:
  serverurl: http://localhost:9076/ds-license/v1

#change URL path to local h2 storage for unittest
db:
  url: jdbc:h2:${env:TMPDIR:-/tmp}/h2_ds_license;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE
  driver: org.h2.Driver
  username: ''
  password: ''

#Will disable all access to admin GUI jsp pages and instead show a info page that it has been disabled.
gui:
  adminGuiEnabled: true

#Configuration of rights module
rights:
  platforms:
    - name: "dr"
      idTypes:
        - "ds_id"
        - "dr_produktions_id"
        - "egenproduktions_kode"
        - "strict_title"
    - name: "general"
      idTypes:
        - "ds_id"
        - "strict_title"
  
#KeyCloakClientSecret can be seen in the KeyCloak server admin page for the AD realm configuration
#The rsaPublic key can also be seen at the KeyCloak server admin page
#redirectUrl must be added to the whitelist in KeyCloak administration configuration
keycloak:
  realmTokenUrl: 'https://<keycloakServer>/realms/master/protocol/openid-connect/token'
  clientSecret: 'XXXXXX'
  rsaPublicKey: 'XXXXXX'
  redirectUrl: 'http://<keycloak_servername>/ds-license/loginCallbackServlet'
  loginUrl: 'https://<keycloak_servername>/realms/master/protocol/openid-connect/auth?response_type=code&client_id=kb-ad&redirect_uri=http://<servername>/ds-license/loginCallbackServlet'

#The license cache reload time. The replica database application needs to refresh cache since it will not be notified upon changes in configuration.
#300 seconds=5 minutes is a good value.
cache:
  reloadInSeconds: 300  
  

 # Example for postgres
 #url: jdbc:postgresql://localhost:5432/ds-storage
 #driver: org.postgresql.Driver
 #username: username
 #password: password
 

security:
  # The security mode. Valid values are
  # OFFLINE: No validation of security tokens: All requests are accepted.
  # ENABLED (or no mode set): Validation of security tokens against OAuth2 server.
  mode: 'ENABLED'
  # The OAUth2 server base url, typically ending in "realms"
  # Sample: https://keycloak-keycloak.example.org/auth/realms
  baseurl: 'https://keycloak.example.com/realms'
  # Accepted realms for requests. These must be present at the OAuth2 server
  # The authentification url with the correct realm value. Does not seem the used active by code but is required when building. (TODO?)
  auth_url: ' https://api.example.com/oauth2/authorize'
  # Accepted realms for requests. These must be present at the OAuth2 server
  realms:
    - foo-bar
  public_keys:
    # The number of seconds that public keys from the realms are cached
    # Optional, -1 means forever.
    # Default is 600 (10 minutes)
    ttl_seconds: 86400

  # Client settings are used if the webapp needs to request tokens from the OAuth2 server
  client:
    # Matches OAuth2 server Client ID
    id: 'some_client'
    # Secret is used if the service needs to request a token from the OAuth2 server.
    # This typically used for calls between services, where there is a need for elevated access.
    secret: '01234567-89ab-cdef-0123-456789abcdef'

 
